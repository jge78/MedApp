version: '3.4'

networks:
  backend:
  frontend:

volumes:
  usersdb_volume:
  appointmentsdb_volume:

services:

# SERVERS
# RabbitMQ
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.10.6-management-alpine
    ports:
      - 5672:5672    #amqp
      - 15672:15672  #http
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 10s
      retries: 3

# appointmentsdb
  appointmentsdb:
    container_name: appointmentsdb
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 1432:1433
    volumes:
      - appointmentsdb_volume:/var/opt/mssql/
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Dayforce1!
    networks:
      - backend

# usermanagementdb
  usermanagementdb:
    container_name: usermanagementdb
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 1434:1433
    volumes:
      - usersdb_volume:/var/opt/mssql/
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Dayforce1!
    networks:
      - backend

  # # mongodb:
  # #   container_name: mongo-db
  # #   image: mongo
  # #   ports:
  # #     - 8005:27017
  # #   networks:
  # #     - backend

# medapp.appointmentsconsumer / medapp.appointments.api
  medapp.appointmentsconsumer:
    container_name: medapp-appointments-consumer
    image: ${DOCKER_REGISTRY-}medappappointmentsconsumer
    depends_on:
      - rabbitmq
      - appointmentsdb
    build:
      context: .
      dockerfile: AppointmentsConsumer/Dockerfile
    networks:
      - backend

  medapp.appointments.api:
    container_name: medapp-appointments-api
    image: ${DOCKER_REGISTRY-}medappappointmentsapi
    depends_on:
      - rabbitmq
      - appointmentsdb
      - medapp.appointmentsconsumer
    # ports:
    #   - 8080:8080    #http
    build:
      context: .
      dockerfile: MEDApp.Appointments.Api/Dockerfile
    networks:
      - backend

# usermanagementconsumer / medapp.usermanagement.api
  usermanagementconsumer:
    container_name: medapp-usermanagement-consumer
    image: ${DOCKER_REGISTRY-}usermanagementconsumer
    depends_on:
      - rabbitmq
      - usermanagementdb
    build:
      context: .
      dockerfile: UserManagementConsumer/Dockerfile
    networks:
      - backend

  medapp.usermanagement.api:
    container_name: medapp-usermanagement-api
    image: ${DOCKER_REGISTRY-}medappusermanagementapi
    depends_on:
      - rabbitmq
      - usermanagementdb
      - usermanagementconsumer
    # ports:
    #   - 8081:8080    #http
    build:
      context: .
      dockerfile: MEDApp.UserManagement.Api/Dockerfile
    networks:
      - backend

# patientmanagementconsumer / medapp.patientmanagement.api
  patientmanagementconsumer:
    container_name: medapp-patientmanagement-consumer
    image: ${DOCKER_REGISTRY-}patientmanagementconsumer
    depends_on:
      - rabbitmq
    build:
      context: .
      dockerfile: PatientManagementConsumer/Dockerfile
    networks:
      - backend

# medapp.patientmanagement.api / medappauthenticationwebapi
  medapp.patientmanagement.api:
    container_name: medapp-patientmanagement-api
    image: ${DOCKER_REGISTRY-}medapppatientmanagementapi
    depends_on:
      - rabbitmq
      - patientmanagementconsumer
    build:
      context: .
      dockerfile: MEDApp.PatientManagement.Api/Dockerfile
    networks:
      - backend

# medappauthenticationwebapi
  medappauthenticationwebapi:
    container_name: medapp-authentication-api
    image: ${DOCKER_REGISTRY-}medappauthenticationwebapi
    build:
      context: .
      dockerfile: MedAppAuthenticationWebApi/Dockerfile
    # ports:
    #   - 8086:8080
    networks:
      - backend

# medapp.apigateway
  medapp.apigateway:
    container_name: medapp-api-gateway
    image: ${DOCKER_REGISTRY-}medappapigateway
    depends_on:
      - medappauthenticationwebapi
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - 8085:8080
    networks:
      - backend

  
