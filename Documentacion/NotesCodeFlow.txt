

1.	C# 10 Fundamentals | Pluralsight							https://app.pluralsight.com/library/courses/c-sharp-10-fundamentals
2.	.NET Standard 2: Getting Started | Pluralsight				
3.	ASP.NET Core 6 Fundamentals | Pluralsight
4.	Dependency Injection in ASP.NET Core 6 | Pluralsight
5.	Asynchronous Messaging with RabbitMQ and EasyNetQ | Pluralsight     
	// optionally you can take this one (it’s a little older)   RabbitMQ by Example | Pluralsight
6.	Getting Started with Apache Kafka | Pluralsight				https://app.pluralsight.com/library/courses/getting-started-apache-kafka	-->>Subscription upgrade
7.	Docker and Kubernetes: The Big Picture | Pluralsight
8.	Getting Started with Docker | Pluralsight
9.	Introduction to .NET Testing with NUnit 3 | Pluralsight

The following are optional and intended for individuals involved in the Hangfire migration:
1.	Simplified .NET Background Tasks with Hangfire 1 | Pluralsight
Additional courses:
-	Asynchronous Programming in C# 10 | Pluralsight
-	SOLID Principles for C# Developers | Pluralsight
-	C# Design Patterns | Pluralsight

https://ceridian.sharepoint.com/:x:/r/teams/AdamHCMDevelopment/Shared%20Documents/Team/CodeFlow%20Training/Training_progress.xlsx?d=w0bfe4053596348e29acc73df945a2818&csf=1&web=1&e=Iiudxn


=================================================
20240305
=================================================

Reference project		https://github.com/ADAM-HCM/ADAM-SaaS-PDFGenerator-API

This is built on MVC

-------------------------------------------------
Onion Architecture
Clean Architecture
-------------------------------------------------
https://blog.allegro.tech/2023/02/onion-architecture.html
https://positiwise.com/blog/clean-architecture-net-core
https://code-maze.com/onion-architecture-in-aspnetcore/


https://youtu.be/GjYwD2VTtqY

-------------------------------------------------
Tools
-------------------------------------------------
Visual Studio
Postman
Docker Desktop
Mongo DB


=================================================
PROYECTO
=================================================

FECHA ENTREGA 25/06/2024

https://dayforce.atlassian.net/wiki/spaces/AHDT/pages/362021973/Microservices+and+Message+Broker+Challenge+Project





=================================================
03	ASP.Net Core
=================================================


=================================================
04	ASP.Net Depedency Injection
=================================================

Using Configurations and Options in .Net Core and ASP.Net Apps

https://app.pluralsight.com/library/courses/dotnet-core-aspnet-core-configuration-options




=================================================
Medical Appointment Management System
=================================================

===================
Roles
===================

Internal User
	Medic
	Receptionist

External
	Patient



===================
Register pacients
===================

As a Internal User I need to register the basic information of a patient, including the following:

	Name
	Last Name
	Phone number (mobile)
	Address



=================================================
Medical Appointment Management System
=================================================
The goal is to develop a system that allows patie

nts to schedule medical appointments online and enables doctors to efficiently manage their schedules. Below are the key components of the system:

Programming Language: C#

We will use C# as the primary programming language for system development.

Microservices:

We’ll implement microservices to handle different aspects of the system.

Each microservice will be responsible for specific functions, such as appointment management and schedule administration.

The microservices architecture allows us to scale and maintain each component independently.

RabbitMQ for Communication:

We’ll use RabbitMQ as our messaging broker.

Microservices will communicate with each other via RabbitMQ using queues and messages.

This ensures efficient and scalable communication between different system components.

REST API:

We’ll implement a REST API for user interaction.

Patients can schedule appointments, and doctors can manage their schedules through this API.

Frontend (Optional):

While not mandatory, consider developing a user interface (frontend) to facilitate user interaction with the system.

You can create a web application or a mobile app to access system functionalities.

Database: SQL Server

Use SQL Server as the database management system.

Store patient information, appointment details, and other relevant data.

Docker containers

Utilize Docker containers for building the complete microservices ecosystem.

Demonstration with Postman:

We’ll use Postman to demonstrate the system’s functionality.

Calls to different microservices via Postman will showcase how medical appointments are managed.

Microservices definition:


=================================================
Authentication and Authorization Service:
=================================================

This microservice would handle user authentication, session management, and access permissions.

Responsibilities:

	User authentication.
	Session management.
	Permission control.


==================================================================================================
User Management Service:
==================================================================================================

This service would manage user registration, profile management, and information related to patients and medical staff.

Responsibilities:

	User registration.
	Profile management.
	Patient and medical staff information.

=============================
Case 1
=============================

Description

As a NEW patient I need to create a profile with my basic personal information, So I can schedule appointments and the physician can see my information, such as name and phone number

The data to be considered is:

id				Unique value for each user type
usertype		User type: medic,user,patient
firstname		First name(s)
lastname		Last name(s)
dateofbirth		Date of birth
phonenumber		Phone number
email			e-mail


Acceptance Criteria

The database contains my personal information, enough so I can schedule a medical appointment

=============================
Case 1
=============================








==================================================================================================
Appointment Management Service:
==================================================================================================

The core microservice of the system, responsible for creating, modifying, and canceling medical appointments.

Also manages physician availability.

Responsibilities:

	Appointment creation, modification, and cancellation.
	Physician availability management.

=================================================
Notifications Service:
=================================================

Handles sending reminders, confirmations, and other notifications related to medical appointments.

Responsibilities:

	Appointment reminders.
	Confirmation notifications.

=================================================
Patient Management Service:
=================================================

Manages patient medical information, including medical histories, allergies, and medications.

Responsibilities:

	Patient medical records.
	Allergies and medications.

=================================================
Physician Management Service:
=================================================

Manages physician details, including availability, specialties, and consultation hours.

Responsibilities:

	Physician availability.
	Specialties and schedules.

=================================================
Third-Party Integration Service:
=================================================

If necessary, integrates the medical appointment system with external systems (e.g., billing systems or electronic health records).

Responsibilities:

	Integration with third-party systems.

In summary, this medical appointment management system will provide an efficient and scalable solution for patients and doctors, enhancing the appointment scheduling experience and medical agenda administration.